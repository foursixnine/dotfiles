# Sample .bashrc for SuSE Linux
# Copyright (c) SuSE GmbH Nuernberg

# There are 3 different types of shells in bash: the login shell, normal shell
# and interactive shell. Login shells read ~/.profile and interactive shells
# read ~/.bashrc; in our setup, /etc/profile sources ~/.bashrc - thus all
# settings made here will also take effect in a login shell.
#
# NOTE: It is recommended to make language settings in ~/.profile rather than
# here, since multilingual X sessions would not work properly if LANG is over-
# ridden in every subshell.

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# Some applications read the EDITOR variable to determine your favourite text
# editor. So uncomment the line below and enter the editor of your choice :-)
export EDITOR=/usr/bin/vim
#export EDITOR=/usr/bin/mcedit

# For some news readers it makes sense to specify the NEWSSERVER variable here
#export NEWSSERVER=your.news.server

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8


# If you want to use a Palm device with Linux, uncomment the two lines below.
# For some (older) Palm Pilots, you might need to set a lower baud rate
# e.g. 57600 or 38400; lowest is 9600 (very slow!)
#
#export PILOTPORT=/dev/pilot
#export PILOTRATE=115200

# Variables start here

export USER_CONF_DIR=/home/foursixnine/Projects/foursixnine.io/mars-configurations
export GPG_TTY=$(tty)

# added by travis gem
[ -f /home/foursixnine/.travis/travis.sh ] && source /home/foursixnine/.travis/travis.sh

#setup perl paths
eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)

#setup go paths
export GOPATH=/home/foursixnine/Projects/foursixnine.io/go:$GOPATH
export PATH=$(go env GOPATH):$PATH  # ← put this line in .bashrc

#setup ruby paths
export PATH=$(ruby  -e 'puts Gem.bindir'):$PATH

# local paths come last
export PATH=$PATH:$HOME/.local/bin:$HOME/bin

powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
PYTHON_SITE_PATH=$(python -m site --user-site)
. $PYTHON_SITE_PATH/powerline/bindings/bash/powerline.sh

###-tns-completion-start-###
if [ -f /home/foursixnine/.tnsrc ]; then 
    source /home/foursixnine/.tnsrc 
fi
###-tns-completion-end-###

test -s ~/.alias && . ~/.alias || true
alias mme="movie_mode_enable"
alias mmd="movie_mode_disable"

## Functions below this line

#setup screen stuff
alias=monitor_brightness="xrandr --output HDMI-2 --brightness 0.5"

movie_mode_enable (){
    xset -dpms
    xset s off
}

movie_mode_disable (){
    xset +dpms
    xset s on
}

HUB=$(which hub)
# Is hub installed?
if [ ! -z ${HUB} ]; then
    eval "$(hub alias -s)"
    source ${USER_CONF_DIR}/completions/hub.bash_completion.sh

    # This can be put into a separate alias file
    open-pull-request() {
        (git log --pretty='%s' origin/master.. && echo "" && git log origin/master.. --pretty='%b') > /tmp/commit | hub pull-request --draft --edit -F /tmp/commit
    }

    git-stage-refactored() {
        git add $(git status -uno --short | sed s/^\ M//)
    }
fi

gh-url(){
    echo $(curl -s -i https://git.io -F "url=$1" | grep Location | sed s/Location/New\ url/ )
}

wipe_console () {
    printf "\e[3J"
}

if { [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; } then
        SESSION_NAME=$(tmux display-message -p '#S')
        if [ "${SESSION_NAME}" = "openqa-workspace" ]; then

                echo "We are in tmux session meant for openQA work"


                export OPENQA="$HOME/Projects/suse.com/github.com/os-autoinst"
                export OPENQA_CONFIG="${OPENQA}/openQA/local/openqa"
                export TEST_PG="DBI:Pg:dbname=test"
                export OPENQA_CONFIG="${OPENQA}/openQA/local/openqa"
                export OPENQA_SRC="${OPENQA}/openQA"
                export OSAUTOINST_SRC="${OPENQA}os-autoinst"
                export OPENQA_BASEDIR=/srv/data/openqa/development_basedir

                start_openqa() {
                        TYPE='debug'
                        #script/openqa gru -m $TYPE run & sleep 1;
                        cd $OPENQA_SRC;
                        OPENQA_LOGFILE=openqa-scheduler.log script/openqa-scheduler daemon -m production & sleep 1;
                        OPENQA_LOGFILE=openqa-websockets.log script/openqa-websockets daemon -m production & sleep 1;
                        OPENQA_LOGFILE=openqa-webui.log script/openqa prefork --proxy -i 100 -H 400 -w 10 -G 800 & sleep 1;
                        OPENQA_LOGFILE=openqa-workercachedaemon.log script/openqa-workercache daemon -m production & sleep 1;
                        OPENQA_LOGFILE=openqa-livehandler.log script/openqa-livehandler daemon & sleep 1;
                        OPENQA_LOGFILE=openqa-workercache-minion.log script/openqa-workercache minion worker -m production & sleep 10;
                }

                kill_openqa() {
                        kill $( jobs -p )
                }

                restart_openqa() {
                        kill $( jobs -p )
                        start_openqa
                }

                start_openqa_worker() {
                        script/worker  --instance 1 --isotovideo ${OPENQA}/os-autoinst/isotovideo --verbose
                }
        fi;
fi;

echo $- | grep -q i
if  [ $? -eq 0 ]; then
    if  ! [  "$TERM" = "screen" ] && ! [ -n "$TMUX" ] ;  then
        # Only show specific stuff if we're running in a real shell.
        #screenfetch
        echo "Screenfetch it's cancelled for now"
    fi;

fi;
