# Sample .bashrc for SuSE Linux
# Copyright (c) SuSE GmbH Nuernberg

# There are 3 different types of shells in bash: the login shell, normal shell
# and interactive shell. Login shells read ~/.profile and interactive shells
# read ~/.bashrc; in our setup, /etc/profile sources ~/.bashrc - thus all
# settings made here will also take effect in a login shell.
#
# NOTE: It is recommended to make language settings in ~/.profile rather than
# here, since multilingual X sessions would not work properly if LANG is over-
# ridden in every subshell.

# Some applications read the EDITOR variable to determine your favourite text
# editor. So uncomment the line below and enter the editor of your choice :-)
#export EDITOR=/usr/bin/vim
#export EDITOR=/usr/bin/mcedit

# For some news readers it makes sense to specify the NEWSSERVER variable here
#export NEWSSERVER=your.news.server

# If you want to use a Palm device with Linux, uncomment the two lines below.
# For some (older) Palm Pilots, you might need to set a lower baud rate
# e.g. 57600 or 38400; lowest is 9600 (very slow!)
#
#export PILOTPORT=/dev/pilot
#export PILOTRATE=115200

test -s ~/.alias && . ~/.alias || true
eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)"

export PATH="$HOME/.local/bin:$PATH:$HOME/go/bin"
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
. $HOME/.local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh

export USER_CONF_DIR=/home/foursixnine/Projects/foursixnine.io/mars-configurations
HUB=$(which hub)
# Is hub installed?
if [ ! -z ${HUB} ]; then
    eval "$(hub alias -s)"
    source ${USER_CONF_DIR}/completions/hub.bash_completion.sh

    # This can be put into a separate alias file
    open-pull-request() {
        (git log --pretty='%s' origin/master.. && echo "" && git log origin/master.. --pretty='%b') > /tmp/commit | hub pull-request -F /tmp/commit
    }

    git-stage-refactored() {
        git add $(git status -uno --short | sed s/^\ M//)
    }

fi

wipe_console () {
    printf "\e[3J"
}

if { [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; } then
        SESSION_NAME=$(tmux display-message -p '#S')
        if [ "${SESSION_NAME}" = "openqa-workspace" ]; then

                echo "We are in tmux session meant for openQA work"


                export OPENQA="$HOME/Projects/suse.com/github.com/os-autoinst"
                export OPENQA_CONFIG="${OPENQA}/openQA/local/openqa"
                export TEST_PG="DBI:Pg:dbname=test"
                export OPENQA_CONFIG="${OPENQA}/openQA/local/openqa"
                export OPENQA_SRC="${OPENQA}/openQA"
                export OSAUTOINST_SRC="${OPENQA}os-autoinst"
                export OPENQA_BASEDIR=/srv/data/openqa/development_basedir

                start_openqa() {
                        TYPE='debug'
                        #script/openqa gru -m $TYPE run & sleep 1;
                        cd $OPENQA_SRC;
                        OPENQA_LOGFILE=openqa-resource-allocator.log script/openqa-resource-allocator & sleep 1;
                        OPENQA_LOGFILE=openqa-scheduler.log script/openqa-scheduler & sleep 1;
                        OPENQA_LOGFILE=openqa-websockets.log script/openqa-websockets & sleep 1;
                        OPENQA_LOGFILE=openqa-webui.log script/openqa prefork --proxy -i 100 -H 400 -w 10 -G 800 & sleep 1;
                        OPENQA_LOGFILE=openqa-workercachedaemon.log script/openqa-workercache daemon -m production & sleep 1;
                        OPENQA_LOGFILE=openqa-livehandler.log script/openqa-livehandler daemon & sleep 1;
                        OPENQA_LOGFILE=openqa-workercache-minion.log script/openqa-workercache minion worker -m production & sleep 10;
                }

                kill_openqa() {
                        kill $( jobs -p )
                }

                restart_openqa() {
                        kill $( jobs -p )
                        start_openqa
                }

                start_openqa_worker() {
                        script/worker  --instance 1 --isotovideo ${OPENQA}/os-autoinst/isotovideo --verbose
                }
        fi;
fi;

echo $- | grep -q i
if  [ $? -eq 0 ]; then
    if  ! [  "$TERM" = "screen" ] && ! [ -n "$TMUX" ] ;  then
        # Only show specific stuff if we're running in a real shell.
        screenfetch
    fi;

fi;

# added by travis gem
[ -f /home/foursixnine/.travis/travis.sh ] && source /home/foursixnine/.travis/travis.sh
eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)"
